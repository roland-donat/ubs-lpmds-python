# -*- coding: utf-8 -*-

#+TITLE: L'environnement de développement Python
#+AUTHOR: Roland Donat
#+EMAIL: roland.donat@univ-ubs.fr
#+DATE: licences professionnelles - SDM/SIS
# Modélisation Stochastique par Réseaux Bayésiens 

#+MACRO: NEWLINE @@latex:\\@@ @@html:<br>@@
#+MACRO: HTMLFONTSIZE @@html:<font size="$2">$1</font>@@
#+MACRO: SUBTITLE @@html:<div class="slidesubtitle">$1</div>@@

# Org-mode general options
# ------------------------
#+LANGUAGE: fr
#+OPTIONS: H:3 num:t toc:t \n:nil @:t ::t |:t ^:{} f:t TeX:t author:t d:nil timestamp:nil
#+OPTIONS: html-postamble:nil
#+DRAWERS: OPTIONS CACHE MACROS
#+STARTUP: content 
#+STARTUP: hidestars
#+TODO: TODO(t) INPROGRESS(p) | DONE(d)
#+BIND: org-latex-table-scientific-notation "{%s}E{%s}"

# HTML options
# ------------
# #+HTML_HEAD: <link rel="stylesheet" type="text/css" href="./css/edgemind.css" />
# #+HTML_HEAD: <link rel="stylesheet" type="text/css" href="./css/ensibs.css" />
# CSS to get the ReadTheDoc style
# #+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://www.pirilampo.org/styles/readtheorg/css/htmlize.css"/>
# #+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://www.pirilampo.org/styles/readtheorg/css/readtheorg.css"/>
# #+HTML_HEAD: <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
# #+HTML_HEAD: <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js"></script>
# #+HTML_HEAD: <script type="text/javascript" src="https://www.pirilampo.org/styles/lib/js/jquery.stickytableheaders.js"></script>
# #+HTML_HEAD: <script type="text/javascript" src="https://www.pirilampo.org/styles/readtheorg/js/readtheorg.js"></script>

# LaTeX options
# -------------
:OPTIONS:
#+LaTeX_CLASS: article
#+LaTeX_CLASS_OPTIONS: [a4paper,twoside,11pt]

#+LATEX_HEADER: \usepackage[T1]{fontenc}
#+LATEX_HEADER: \usepackage[french]{babel}
#+LATEX_HEADER: \usepackage[default,scale=0.95]{opensans}

#+LATEX_HEADER: \frenchbsetup{ListOldLayout=true} %FBReduceListSpacing=true,CompactItemize=false}

#+LATEX_HEADER: \usepackage{graphicx}
#+LATEX_HEADER: % Graphics path
#+LATEX_HEADER: \graphicspath{ 
#+LATEX_HEADER:   {./fig/}
#+LATEX_HEADER: }

#+LATEX_HEADER: \usepackage{amssymb}
#+LATEX_HEADER: \usepackage{amsmath}
#+LATEX_HEADER: \usepackage{amsfonts}

#+LATEX_HEADER: \usepackage{color}
#+LATEX_HEADER: % EdgeMind Colors
#+LATEX_HEADER: \definecolor{UBSOrange}         {HTML}{e46c0a}
#+LATEX_HEADER: \definecolor{UBSYellow}         {HTML}{ffe000}
#+LATEX_HEADER: \definecolor{almostwhite}        {rgb}{0.95,0.95,0.95}
#+LATEX_HEADER: \usepackage{verbatim}
#+LATEX_HEADER: \usepackage{tabularx}
#+LATEX_HEADER: \usepackage{float}
#+LATEX_HEADER: \usepackage{lmodern}

#+LATEX_HEADER: \usepackage[pdfborder={0 0 0},bookmarks=true,bookmarksnumbered=true,pdfpagemode=None,pdfstartview=FitH,pdfpagelayout=SinglePage,colorlinks=true,linkcolor=EMBrown,urlcolor=EMBrown,citecolor=EMBrown]{hyperref}
#+LATEX_HEADER: \usepackage{natbib}
#+LATEX_HEADER: \usepackage{subfig}
#+LATEX_HEADER: \captionsetup[table]{position=bottom,margin=90pt,font=small,labelfont=bf,labelsep=endash,format=plain}
#+LATEX_HEADER: \captionsetup[figure]{position=bottom,margin=90pt,font=small,labelfont=bf,labelsep=endash,format=plain}
#+LATEX_HEADER: \captionsetup[subfloat]{margin=0pt,font=footnotesize}
#+LATEX_HEADER: \usepackage{booktabs}

#+LATEX_HEADER: \usepackage{minted}
#+LATEX_HEADER: \usepackage{xcolor}
# #+LATEX_HEADER: \usemintedstyle{monokai}
# #+LATEX_HEADER: \renewcommand{\theFancyVerbLine}{\sffamily \footnotesize {\color{EMLogoBlue}\oldstylenums{\arabic{FancyVerbLine}}}}

#+LATEX_HEADER: \usepackage{geometry}
#+LATEX_HEADER: \geometry{
#+LATEX_HEADER: %  nohead,
#+LATEX_HEADER:   top=2.25cm, 
#+LATEX_HEADER:   bottom=2.25cm, 
#+LATEX_HEADER:  left=2.5cm, 
#+LATEX_HEADER:  right=2.5cm}

#+LATEX_HEADER: \usepackage{setspace}
#+LATEX_HEADER: \onehalfspacing
#+LATEX_HEADER: % Supprime l'indentation
#+LATEX_HEADER: \setlength{\parindent}{0pt}
#+LATEX_HEADER: % Espacement entre les paragraphes
#+LATEX_HEADER: \setlength{\parskip}{2ex}


:END:

* Configuration                                                    :noexport:
# Latex command to work with minted
:CACHE:
#+HEADER: :eval yes
#+HEADER: :results silent
#+HEADER: :exports none
#+BEGIN_SRC emacs-lisp 
(setq org-latex-listings 'minted
      org-latex-packages-alist '(("newfloat" "minted"))
      org-latex-pdf-process
      '("xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "bibtex %b"
        "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
#+END_SRC
:END:


# Publishing configuration
# ------------------------
:CACHE:
#+HEADER: :eval yes
#+HEADER: :results silent
#+HEADER: :exports none
#+BEGIN_SRC emacs-lisp 
;; Define some export options here since in org-publish-project-alist some of them are not taken into account
;; e.g. with-toc nil
(defun my-html-export-options (plist backend)
  (cond 
    ((equal backend 'html)
     (plist-put plist :with-toc t)
     (plist-put plist :section-numbers nil)
     (plist-put plist :with-author t)
     (plist-put plist :with-email t)
     (plist-put plist :with-date t)
     ))
  plist)

(setq org-publish-project-alist
      '(
	
        ("main"
         :base-directory "./"
         :include ("rb_mod_stoch.org")
         :publishing-directory "./"
         :recursive nil
         :publishing-function org-html-publish-to-html
         :preparation-function (lambda () (setq org-export-filter-options-functions '(my-html-export-options)))
         :auto-preamble t
         :html-head  "<link rel='stylesheet' type='text/css' href='edgemind.css' />"
         :htmlized-source 
	 :section-numbers nil
         )
        ("td-html"
         :base-directory "./td/"
         :base-extension "org"
         :publishing-directory "./td"
         :recursive t
         :publishing-function org-html-publish-to-html
         :preparation-function (lambda () (setq org-export-filter-options-functions '(my-html-export-options)))
         :auto-preamble t
         :html-head  "<link rel='stylesheet' type='text/css' href='edgemind.css' />"
         :htmlized-source 
         )

	 ;; pdf
        ("td-pdf"
         :base-directory "./td/"
         :base-extension "org"
         :publishing-directory "./td"
         :recursive t
         :publishing-function org-latex-publish-to-pdf
         )

	 ("td-attach"
	 :base-directory "./td/"
	 :base-extension "xdsl\\|txt\\|csv\\|py\\|png"
         :publishing-directory "./td"
	 :recursive t
	 :publishing-function org-publish-attachment
	 )

	 ("cours-attach"
	 :base-directory "./cours/"
	 :base-extension "pdf\\|xdsl\\|txt\\|csv\\|py"
         :publishing-directory "./cours"
	 :recursive t
	 :publishing-function org-publish-attachment
	 )

        ("projet-html"
         :base-directory "./projet/"
         :base-extension "org"
         :publishing-directory "./projet"
         :recursive t
         :publishing-function org-html-publish-to-html
         :preparation-function (lambda () (setq org-export-filter-options-functions '(my-html-export-options)))
         :auto-preamble t
         :html-head  "<link rel='stylesheet' type='text/css' href='edgemind.css' />"
         :htmlized-source 
         )

	 ("projet-attach"
	 :base-directory "./projet/"
	 :base-extension "xdsl\\|txt\\|csv"
         :publishing-directory "./projet"
	 :recursive t
	 :publishing-function org-publish-attachment
	 )

	 ("css"
         :base-directory "./css/"
         :base-extension "css"
         :publishing-directory "./www/css"
         :publishing-function org-publish-attachment)
	 
	 ;("rb_mod_stoch" :components ("main" "td-pdf" "td-html" "td-attach" "cours-attach" "projet-html" "projet-attach" "css"))
	 ;("rb_mod_stoch" :components ("main" "td-pdf" "td-html" "projet-html"))
	 ("rb_mod_stoch" :components ("main"))

      ))
#+END_SRC
:END:


* Objectif

Dans notre module "Introduction à Python pour la Science des Données", nous allons travailler avec
la version 3.8 de =Python=. Ce premier TD a donc pour 
objectif de vous guider pour l'installation d'un environnement standard de développement avec =Python=
3.8. 

Dans un second temps, nous installerons le logiciel =Jupyter= permettant de créer ce que l'on
appelle des /notebooks/. Nous reviendrons largement sur ces /notebooks/ tout au long de notre module.

Enfin, il est important de noter qu'il existe de nombreuses façons de procéder qui diffèrent
notamment selon votre système d'exploitation.

En cas de soucis, Google ou autres sont vos amis. Pensez aux excellents forums d'entraide que sont :
- [[https://openclassrooms.com/fr/dashboard][Openclassroom]] pour des ressources majoritairement en français.
- La référence [[https://stackoverflow.com/][Stackoverflow]] sur lequel il relève aujourd'hui du quasi exploit de trouver un problème
  qui n'aurait jamais été traité sur le forum.


* Installation de l'environnement =Python=

Si vous êtes débutant et quel que soit votre système d'exploitation, le plus simple est d'installer
la distribution [[https://www.anaconda.com/products/individual][=Anaconda=]] qui propose tous les outils dont vous aurez besoin pour ce cours et en
particulier l'interpréteur =Python 3.8= et =Jupyter=.

Une fois =Anaconda= installée, lancez le programme =Anaconda Navigator= qui vous permettra d'avoir
rapidement accès à tous les principaux outils de l'écosystème =Python=.

Dans la case intitulée =Qt Console=, cliquez sur =Launch=. Vous devez voir apparaître une fenêtre de
terminal apparaître avec à l'intérieur :
#+attr_latex: :options style=monokai, bgcolor=almostwhite
#+begin_src sh
IJupyter QtConsole 4.7.5
Python 3.8.3 (default, Jul  2 2020, 16:21:59) 
Type 'copyright', 'credits' or 'license' for more information
IPython 7.17.0 -- An enhanced Interactive Python. Type '?' for help.

In [1]: 
#+end_src

Ce terminal est un interpréteur =Python=. C'est à dire que si vous écrivez une commande dans un
=Python= correct, cet interpréteur est capable de l'évaluer et de renvoyer le résultat.

Par exemple, vous pouvez utiliser =Python= comme une machine à calculer :
#+attr_latex: :options style=monokai, bgcolor=almostwhite
#+begin_src sh
IJupyter QtConsole 4.7.5
Python 3.8.3 (default, Jul  2 2020, 16:21:59) 
Type 'copyright', 'credits' or 'license' for more information
IPython 7.17.0 -- An enhanced Interactive Python. Type '?' for help.

In [1]: 1 + 1
Out[1]: 2
#+end_src
Pour quitter l'interpréteur, tapez simplement =exit()=.

Comme vous pouvez l'imaginer l'interpréteur =Python= (que l'on appelle également console =Python=)
 n'a pas pour vocation de servir de simple machine à calculer. En effet, cette console sert en
 pratique à écrire et évaluer n'importe quels programmes =Python=. Pour plus de confort lors du
 développement de grands programmes, il est possible de rédiger son code dans un fichier séparé puis
 de l'exécuter dans l'interpréteur.

L'information a retenir est la suivante : sans interpréteur =Python=, impossible d'exécuter un
programme =Python=[fn:: Contrairement à un programme écrit dans un langage compilé comme le =C= ou =C++= pour
lequel la présence du compilateur n'est pas nécessaire pourvu d'avoir le fichier
exécutable.].

Dans la suite de ce cours, nous utiliserons assez peu l'interpréteur =Python= directement au profit
des /notebooks/ de l'outil =Jupiter= qui font l'objet de la Section [[sec:notebooks]].

* Les /Notebooks/ =Jupiter=
  <<sec:notebooks>>

=Jupyter Notebook= est un outil /open source/ permettant de développer des programmes =Python= et d'en présenter
les résultats de manière interactive en y incluant de la documentation. L'outil =Jupyter Notebook=
permet de mettre en pratique la démarche de programmation
lettrée[[fn:: cf. [[https://fr.wikipedia.org/wiki/Programmation_lettr%C3%A9e]] pour la culture]]. Cette
démarche est particulièrement bien adapté aux projets de science des données qui mèlent en général
développements informatiques, visualisations et interprétations.

** Qu'est-ce qu'un /notebook/ ?

Un /notebook/ est composé de codes =Python= et leur résultat dans un document unique combinant
visualisations et explications textuelles. L'objectif est de favoriser la transparence, la
compréhension, la reproductibilité et le partage de travaux scientifiques et techniques.

L'utilisation de /notebooks/ est désormais une pratique classique dans les projets de science des
données en entreprises. Bien que dans ce cours nous n'utiliserons =Jupyter Notebook= uniquement
pour réaliser des développements avec le langage =Python=, il est à noter qu'il est possible
d'utiliser d'autres langages (e.g. =R=, =Ruby=, =Julia=, etc).


** Création de votre premier /notebook/

Dans cette section, nous allons apprendre à :
- exécuter et enregistrer des /notebook/ ;
- comprendre la structure d'un /notebook/ et l'interface de =Jupyter=; 
- se familiariser avec la terminologie des /notebooks/.

*** Lancer =Jupyter=

Lancez tout d'abord le programme =Anaconda Navigator=, puis cliquez sur le bouton =Launch= du cadre
intitulé =Jupyter Notebook= (cf. Figure [[ref:fig_anaconda_navigator_launch_jupyter]])

#+CAPTION: Lancement de =Jupyter Notebook= depuis =Anaconda Navigator=. label:fig_anaconda_navigator_launch_jupyter
#+ATTR_LATEX: :width \textwidth
#+ATTR_HTML: :width 100%
[[./fig/anaconda_navigator_launch_jupyter.png]]

Une fois démarré, l'outil =Jupyter Notebook= affiche un tableau de bord (cf. Figure
[[ref:fig_jupyter_dashboard]]) permettant d'explorer, créer
et éditer vos /notebooks/ =Jupyter=.

#+CAPTION: Tableau de bord de =Jupyter=. label:fig_jupyter_dashboard
#+ATTR_LATEX: :width \textwidth
#+ATTR_HTML: :width 100%
[[./fig/jupyter_dashboard.png]]


_Remarques geeks_: 
- Le tableau de bord vous donnera accès uniquement aux fichiers et sous-dossiers contenus dans le
  répertoire de démarrage de =Jupyter= (c'est-à-dire où =Jupyter= ou =Anaconda= est installé). 
- Il est également possible de démarrer le tableau de bord sur n'importe quel système /via/ l'invite
  de commande (ou le terminal sur les systèmes Unix) en entrant la commande =jupyter notebook=. Dans
  ce cas, le répertoire de travail courant sera le répertoire de démarrage.  
- =Jupyter Notebook= s'ouvre dans votre navigateur web à une adresse qui doit ressembler à
  [[http://localhost:8888/tree]]. =Localhost= désigne ici votre propre machine et =8888= désigne le
  numéro d'un port de communication sur lequel "écoute" un serveur =Python= (autrement dit une sorte
  d'interpréteur =Python=) qui exécutera les commandes que vous saisirez dans vos /notebooks/.
- Les /notebooks/ et le tableau de bord de =Jupyter= sont donc des applications Web mais il est
  important de comprendre que /notebooks/ ne sont pas réellement sur le Web (mais bien sur votre
  ordinateur local) tant que vous ne décidez pas de les partager. 

*** Créer un nouveau /notebook/

L'interface du tableau de bord est relativement intuitive. Pour créer votre premier /notebook/,
accédez au dossier dans lequel vous souhaitez travailler puis cliquez sur le bouton déroulant
=Nouveau= en haut à droite et sélectionnez =Python 3= (cf. Figure [[ref:fig_jupyter_dashboard_new_notebook]]).

#+CAPTION: Création d'un nouveau /notebook/. label:fig_jupyter_dashboard_new_notebook
#+ATTR_LATEX: :scale 1
#+ATTR_HTML: :width 100%
[[./fig/jupyter_dashboard_new_notebook.png]]

Votre premier /notebook/ =Jupyter= s'ouvre dans un nouvel onglet. À note que chaque /notebook/
utilise son propre onglet car vous pouvez ouvrir plusieurs /notebooks/ simultanément. 

En revenant au tableau de bord, vous verrez qu'un nouveau fichier =Untitled.ipynb= a été créé avec
une icône verte et un texte =running= indiquant que votre /notebook/ est en cours
d'exécution. Chaque /notebook/ est associé à un fichier d'extension =.ipynb=.

_Remarques geeks_: 
- Un fichier =.ipynb= est un fichier texte qui décrit le contenu d'un /notebook/ dans un format
  appelé =JSON=. Tous les éléments du /notebooks/, y compris les éventuelles pièces jointes
  (e.g. images, graphiques, etc), sont convertis en chaînes de caractères pour y être stockées dans
  le fichier =.ipynb= avec d'autres  métadonnées. 
- Il est donc possible de modifier manuellement ce fichier - si vous savez ce que vous faites ! - mais
  ce n'est en général pas nécessaire ni recommandé.


** Interface d'un /notebook/

L'outil =Jupyter Notebook= doit être vu comme un outil d'édition de texte avancé. Tout au long
de ce cours, nous explorerons ses principales fonctionnalités. 

En parcourant l'interface, deux termes assez importants et probablement nouveaux pour
vous apparaissent : les cellules (cf. Section [[sec:notebook_cells]]) et les noyaux (cf. Section  [[sec:notebook_kernels]]). Ces deux notions sont essentielles pour
comprendre en quoi =Jupyter= est bien plus qu'un simple éditeur de texte.

*** Les cellules
  <<sec:notebook_cells>>

Les cellules sont les éléments constitutifs d'un /notebook/. Il existe deux catégories principales
de cellules :
- Les cellules de code qui contiennent donc du code =Python= à exécuter dans le noyau (cf. Section
  [[sec:notebook_kernels]]. Lorsque le code est exécuté, le /notebook/ affiche la sortie sous la cellule
  de code qui l'a produite. 
- Une cellule de texte contient du texte formaté à l'aide du langage =Markdown= et affiche le rendu
  lorsque la cellule =Markdown= est exécutée. 

La Figure [[ref:fig_notebook_cells]] donne un exemple de /notebook/ avec trois cellules : une
cellule de texte simple, une cellule de code et son résultat et une cellule utilisant le formatage =Markdown=.

Pour ajouter de nouvelles cellules, cliquez sur =Insérer= dans la barre de menus et sélectionnez
=Insérer une cellule après= pour créer une nouvelle cellule de code sous la cellule sélectionnée.

#+CAPTION: Exemple de /notebook/ avec trois cellules. label:fig_notebook_cells
#+ATTR_LATEX: :width \textwidth
#+ATTR_HTML: :width 100%
[[./fig/notebook_cells.png]]

*** Les noyaux
  <<sec:notebook_kernels>>

Un noyau est un moteur de calcul qui exécute le code contenu dans un /notebook/. Derrière
chaque /notebook/, un noyau est démarré attendant patiemment du code à évaluer. Lorsque vous
exécutez une cellule de code, ce code est exécuté dans le noyau puis le résultat (ou sortie) est
renvoyée à la cellule pour y être affiché. L'état du noyau persiste dans le temps et entre les
cellules. Le noyau concerne donc le /notebook/ dans son ensemble et non les cellules individuellement.  

Par exemple, si vous importez des bibliothèques ou déclarez des variables dans une cellule, elles
seront disponibles dans les autres. 

# #+attr_latex: :options bgcolor=almostwhite
# #+BEGIN_SRC ipython
# x = 'foo'
# y = 'bar'
# x + ' ' + y
# #+END_SRC

# #+RESULTS:
# : # Out[1]:
# : : 'foo bar'

# * Test

# #+BEGIN_SRC ipython
# x = 'foo'
# y = 'bar'
# x + ' ' + y
# #+END_SRC
